{"version":3,"file":"static/js/538.9e43719f.chunk.js","mappings":"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","sources":["components/PhonebookForm/PhonebookForm.styled.jsx","components/PhonebookForm/PhonebookForm.jsx","components/Filter/Filter.styled.jsx","redux/filter/selectors.js","components/Filter/Filter.jsx","redux/contacts/selectors.js","components/Contact/Contact.js","components/ContactList/ContactList.jsx","pages/Contacts.js"],"sourcesContent":["import styled from \"styled-components\";\n\n\n\nexport const Label = styled.label`\n    display: flex;\n    flex-direction: column;\n    margin-bottom: 10px;\n    width: 200px\n`;\n\n\n\nexport const Button = styled.button`\n    background-color: rgb(147, 243, 229);\n    border: none;\n    box-shadow: 0px 2px 1px rgba(0, 0, 0, 0.2), 0px 1px 1px rgba(0, 0, 0, 0.14),\n        0px 1px 3px rgba(0, 0, 0, 0.12);\n        border-radius: 10px;\n    width: 100px;\n    padding: 5px;\n    &:hover, &:focus {\n        background-color: lightblue;\n    }\n`;\n","import { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as yup from \"yup\";\nimport PropTypes from \"prop-types\";\nimport { Label, Button } from \"./PhonebookForm.styled\";\nimport styled from \"styled-components\";\nimport { addContact } from \"redux/contacts/operations\";\nimport { useDispatch } from \"react-redux\";\nimport { toast } from \"react-toastify\";\n\nconst InputName = styled(Field)`\n    border: 1px solid gray;\n    border-radius: 5px;\n    outline: none;\n    &:hover, &:focus {\n        border: 5px solid rgb(147, 243, 229);\n    }\n`;\n\nconst FormEl = styled(Form)`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin: 0 auto;\n    padding: 10px;\n    width: 300px;\n    \n    border: 5px solid  rgb(147, 243, 229);\n    box-shadow: 0px 2px 1px rgba(0, 0, 0, 0.2), 0px 1px 1px rgba(0, 0, 0, 0.14),\n        0px 1px 3px rgba(0, 0, 0, 0.12);\n    border-radius: 10px;\n`;\n\nconst initialValues = {\n    id: \"\",\n    name: \"\",\n    number: \"\",\n};\n\nlet schema = yup.object().shape({\n    name: yup.string().required(),\n    number: yup.number().required()\n});\n\nconst PhonebookForm = () => {\n    const dispatch = useDispatch();\n\n    const handleSubmit = (values, {resetForm}) => {\n        const contact = {  name: values.name, number: values.number };\n        toast.success(\"Contact has been created!\");\n        dispatch(addContact(contact));\n        resetForm();\n    }\n\n        return (\n            <Formik initialValues={initialValues} validationSchema={schema} onSubmit={handleSubmit}>\n               <FormEl>\n                    <Label htmlFor=\"name\">\n                        <span>Name</span>\n                        <InputName\n                            type=\"text\"\n                            name=\"name\"\n                            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\" required\n                        />\n                        <ErrorMessage name=\"name\" />\n                    </Label>\n                    <Label htmlFor=\"number\">\n                        <span>Number</span>\n                        <InputName\n                            type=\"tel\"\n                            name=\"number\"\n                            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with + and min length 7\"\n                            required\n                            minLength={7}\n                        />\n                        <ErrorMessage name=\"number\" />\n                    </Label>\n                    <Button type=\"submit\">Add contact</Button>\n                </FormEl>\n            </Formik>\n        )\n}\n\nPhonebookForm.propTypes = {\n    id: PropTypes.string,\n    name: PropTypes.string,\n    number: PropTypes.string,\n}\n\nexport default PhonebookForm;","import styled from \"styled-components\";\n\n\nexport const Container = styled.div`\n    margin: 0 auto;\n`;\n\nexport const InputName = styled.input`\n    border: 1px solid gray;\n    border-radius: 5px;\n    outline: none;\n    &:hover, &:focus {\n        border: 5px solid rgb(147, 243, 229);\n    }\n`;","export const selectFilter = state => state.filter.value;\n","import { Label } from \"../PhonebookForm/PhonebookForm.styled\";\nimport { Container, InputName } from \"./Filter.styled\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectFilter } from \"redux/filter/selectors\";\nimport { setFilter } from \"redux/filter/filterSlice\";\n\nconst Filter = () => {\n    const dispatch = useDispatch();\n    const handleFilterChange = e => dispatch(setFilter(e.currentTarget.value));\n    const filter = useSelector(selectFilter);\n    // console.log(filter);\n    \n    return (\n        <Container>\n        <Label>\n            Find contacts by name\n            <InputName type=\"text\" value={filter.filter} onChange={handleFilterChange} />\n        </Label>\n    </Container>\n    )\n    }\n\n\n    \nexport default Filter;","export const selectContacts = state => state.contacts.value;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n","import { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { Button } from 'components/ContactList/ContactList.styled';\nimport { toast } from 'react-toastify';\nimport PropTypes from 'prop-types';\n\nexport const Contact = ({ contact }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => {\n    toast.error('Contact has been deleted!');\n    dispatch(deleteContact(contact.id));\n  };\n\n  // const handleEdit = () => {};\n  return (\n    <>\n      {contact.name}: {contact.number}\n      {/* <Button onClick={handleEdit}>Edit</Button> */}\n      <Button onClick={handleDelete}>Delete</Button>\n    </>\n  );\n};\n\nContact.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string,\n    name: PropTypes.string,\n    number: PropTypes.string,\n  }),\n};\n","import { List, Item } from \"./ContactList.styled\";\nimport { useSelector } from \"react-redux\";\nimport { selectContacts } from \"redux/contacts/selectors\";\nimport { selectFilter } from \"redux/filter/selectors\" \nimport { Contact } from \"components/Contact/Contact\";\n\nconst ContactList = () => {\n    const contacts = useSelector(selectContacts);\n    // console.log(contacts);\n    const filter = useSelector(selectFilter);\n    // console.log(filter);\n\n    const getFilteredContacts = () => {\n        const normalizedFilter = filter.toLowerCase();\n        // console.log(normalizedFilter);\n        return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n    }\n    const filteredContacts = getFilteredContacts();\n    // console.log(filteredContacts);\n    return (\n        <List>\n            {filteredContacts.map(contact => (\n                <Item key={contact.id}>\n                    <Contact contact={contact} />\n                </Item>))}\n        </List>\n    )\n};\n\nexport default ContactList;","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport PhonebookForm from 'components/PhonebookForm';\nimport Filter from 'components/Filter';\nimport ContactList from 'components/ContactList';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      {isLoading && !error && <p>Loading contacts...</p>}\n      {error && <p>{error}</p>}\n      <h1>Phonebook</h1>\n      <PhonebookForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n"],"names":["Label","styled","Button","InputName","Field","FormEl","Form","initialValues","id","name","number","schema","yup","shape","required","dispatch","useDispatch","validationSchema","onSubmit","values","resetForm","contact","toast","addContact","htmlFor","type","pattern","title","minLength","Container","selectFilter","state","filter","value","useSelector","onChange","e","setFilter","currentTarget","selectContacts","contacts","selectIsLoading","isLoading","selectError","error","Contact","onClick","deleteContact","filteredContacts","normalizedFilter","toLowerCase","includes","getFilteredContacts","map","Contacts","useEffect","fetchContacts"],"sourceRoot":""}